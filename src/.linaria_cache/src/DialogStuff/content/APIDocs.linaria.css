.e1hzsx{background-color:#FFFCBE;}
.e1y05ozn{font:14px Menlo,monospace;margin:0 0 16px 0;line-height:1.7em;}
.pxcwywp{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;margin:0 0 12px 0;}
.puvyrxv{background:#f9f9f9;padding:0 8px;border:2px solid #f9f9f9;border-radius:5px;}
.p31lwp8{margin-left:16px;}
.dd4jdop{padding-top:72px;grid-column:1/8;}
.l1c4zgdq{margin-bottom:8px;}
/*# sourceMappingURL=data:application/json;base64,*/