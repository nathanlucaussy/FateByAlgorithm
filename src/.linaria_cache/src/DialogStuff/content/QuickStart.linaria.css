.t93npo1{border:none;border-collapse:collapse;font-family:"Menlo",monospace;grid-column:1/8;}.t93npo1 tr{border:1px solid #EFBBD1;border-left:none;border-right:none;}.t93npo1 tr:first-child{border-top:none;}.t93npo1 tr:last-child{border-bottom:none;}.t93npo1 th{font-weight:normal;font-style:italic;text-align:left;}.t93npo1 th,.t93npo1 td{padding:6px;}.t93npo1 a{margin-bottom:8px;}
/*# sourceMappingURL=data:application/json;base64,*/